<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Nixuebing.github.io/blog</id>
    <title>冰叶小屋</title>
    <updated>2019-06-17T05:52:12.543Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Nixuebing.github.io/blog"/>
    <link rel="self" href="https://Nixuebing.github.io/blog/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Nixuebing.github.io/blog/images/avatar.png</logo>
    <icon>https://Nixuebing.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2019, 冰叶小屋</rights>
    <entry>
        <title type="html"><![CDATA[Java并发编程]]></title>
        <id>https://Nixuebing.github.io/blog/post/java-bing-fa-bian-cheng</id>
        <link href="https://Nixuebing.github.io/blog/post/java-bing-fa-bian-cheng">
        </link>
        <updated>2019-06-13T07:25:36.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="并发bug的源头">并发Bug的源头</h1>
<p>核心矛盾在于CPU、内存、I/O设备的速度差异。<br>
为了合理利用CPU的高性能，平衡三者的速度差异：</p>
<ol>
<li>CPU 增加了缓存，以均衡与内存的速度差异；</li>
<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；</li>
<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h1 id="并发bug的源头">并发Bug的源头</h1>
<p>核心矛盾在于CPU、内存、I/O设备的速度差异。<br>
为了合理利用CPU的高性能，平衡三者的速度差异：</p>
<ol>
<li>CPU 增加了缓存，以均衡与内存的速度差异；</li>
<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；</li>
<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。</li>
</ol>
<!-- more -->
<h2 id="源头之一缓存导致的可见性问题">源头之一：缓存导致的可见性问题</h2>
<p>一个线程对共享变量的修改，另外一个线程能够立刻看到，我们称为<strong>可见性</strong>。</p>
<p><img src="http://pic-cloud.ice-leaf.top/pic-cloud/20190613/26wHwGbSupfO.png?imageslim" alt="mark"></p>
<p>线程A对变量V的操作对于线程B而言就不具备可见性。</p>
<h2 id="源头之二线程切换带来的原子性问题">源头之二：线程切换带来的原子性问题</h2>
<p>我们把一个或多个操作在CPU执行的过程中不被中断的特性称为<strong>原子性</strong>。</p>
<p>高级语言里的一条语句往往需要多条CPU指令完成，例如 <code>count += 1</code>，至少需要三条CPU指令。</p>
<ul>
<li>指令 1：首先，需要把变量 count 从内存加载到 CPU 的寄存器；</li>
<li>指令 2：之后，在寄存器中执行 +1 操作；</li>
<li>指令 3：最后，将结果写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。
而操作系统做任务切换，可以发生在任何一条<strong>CPU指令</strong>执行完，而不是高级语言里的一条语句。</li>
</ul>
<p><img src="http://pic-cloud.ice-leaf.top/pic-cloud/20190613/twvANvmYc0FL.png?imageslim" alt="mark"></p>
<h2 id="源头之三编译优化带来的有序性问题">源头之三：编译优化带来的有序性问题</h2>
<p>双重检查创建单例对象案例：</p>
<pre><code class="language-java">public class Singleton {
  static Singleton instance;
  static Singleton getInstance(){
    if (instance == null) {
      synchronized(Singleton.class) {
        if (instance == null)
          instance = new Singleton();
        }
    }
    return instance;
  }
}
</code></pre>
<p>假设有两个线程 A、B 同时调用 getInstance() 方法，他们会同时发现 <code>instance == null</code> ，于是同时对 Singleton.class 加锁，此时 JVM 保证只有一个线程能够加锁成功（假设是线程 A），另外一个线程则会处于等待状态（假设是线程 B）；线程 A 会创建一个 Singleton 实例，之后释放锁，锁释放后，线程 B 被唤醒，线程 B 再次尝试加锁，此时是可以加锁成功的，加锁成功后，线程 B 检查 <code>instance == null</code>  时会发现，已经创建过 Singleton 实例了，所以线程 B 不会再创建一个 Singleton 实例。</p>
<p>我们以为的new操作应该是：</p>
<ol>
<li>分配一块内存 M；</li>
<li>在内存 M 上初始化 Singleton 对象；</li>
<li>然后 M 的地址赋值给 instance 变量。</li>
</ol>
<p>但是实际上优化后的执行路径却是这样的：</p>
<ol>
<li>分配一块内存 M；</li>
<li>将 M 的地址赋值给 instance 变量；</li>
<li>最后在内存 M 上初始化 Singleton 对象。</li>
</ol>
<p><img src="http://pic-cloud.ice-leaf.top/pic-cloud/20190613/ygdirenM1hMT.png?imageslim" alt="mark"></p>
<h1 id="解决可见性和有序性问题">解决可见性和有序性问题</h1>
<p>导致可见性的原因是缓存，导致有序性的原因是编译优化，所以最直接的办法就是<strong>禁用缓存和编译优化</strong>（程序性能就堪忧了）。<br>
合理的方案是<strong>按需禁用缓存以及编译优化</strong>。</p>
<h2 id="volatile">volatile</h2>
<p>最原始的意义就是禁用CPU缓存。</p>
<h2 id="happens-before-规则">Happens-Before 规则</h2>
<p><strong>前面一个操作的结果对后续操作是可见的。</strong></p>
<ol>
<li>在一个线程中，按照程序顺序，前面的操作 Happens-Before 于后续的任意操作。</li>
<li>对于一个 volatile 变量的写操作，Happens-Before 于后续对这个 volatile 变量的读操作。</li>
<li>如果 A Happens-Before B，且 B Happens-Before C，那么 A Happens-Before C。</li>
</ol>
<p><img src="http://pic-cloud.ice-leaf.top/pic-cloud/20190613/ml8RGWltuC0r.png?imageslim" alt="mark">
“x=42” Happens-Before 写变量 “v=true” ，这是规则 1 的内容；<br>
写变量“v=true” Happens-Before 读变量 “v=true”，这是规则 2 的内容 。
根据规则 3 的内容，如果线程 B 读到了“v=true”，那么线程 A 设置的“x=42”对线程 B 是可见的。</p>
<ol start="4">
<li>对一个锁的解锁 Happens-Before 于后续对这个锁的加锁。</li>
<li>主线程 A 启动子线程 B 后，子线程 B 能够看到主线程在启动子线程 B 前的操作。或者说，如果线程 A 调用线程 B 的 start() 方法（即在线程 A 中启动线程 B），那么该 start() 操作 Happens-Before 于线程 B 中的任意操作。</li>
<li>主线程 A 等待子线程 B 完成（主线程 A 通过调用子线程 B 的 join() 方法实现），当子线程 B 完成后（主线程 A 中 join() 方法返回），主线程能够看到子线程的操作。当然所谓的“看到”，指的是对<strong>共享变量</strong>的操作。或者说，如果在线程 A 中，调用线程 B 的 join() 并成功返回，那么线程 B 中的任意操作 Happens-Before 于该 join() 操作的返回。</li>
</ol>
<h2 id="final">final</h2>
<p>final 修饰变量时，初衷是告诉编译器：这个变量生而不变，可以可劲儿优化。</p>
<h1 id="解决原子性问题">解决原子性问题</h1>
<p>原子性问题的源头是<strong>线程切换</strong>。</p>
<h2 id="synchronize">synchronize</h2>
<blockquote>
<p>当修饰静态方法时，锁定的是当前类的 Class 对象；
当修饰非静态方法的时候，锁定的是当前实例对象 this。</p>
</blockquote>
<pre><code class="language-java">class X {
  // 修饰静态方法
  synchronized(X.class) static void bar() {
    // 临界区
  }
}
</code></pre>
<pre><code class="language-java">class X {
  // 修饰非静态方法
  synchronized(this) void foo() {
    // 临界区
  }
}
</code></pre>
<p><strong>锁和受保护资源的关系：受保护资源和锁之间的关联关系是 N:1 的关系。</strong></p>
<pre><code class="language-java">class SafeCalc {
  static long value = 0L;
  synchronized long get() {
    return value;
  }
  synchronized static void addOne() {
    value += 1;
  }
}
</code></pre>
<p><img src="http://pic-cloud.ice-leaf.top/pic-cloud/20190617/HEicy1QE06wD.png?imageslim" alt="mark"></p>
<pre><code class="language-java">class Account {
  private int balance;
  // 转账
  synchronized void transfer(
      Account target, int amt){
    if (this.balance &gt; amt) {
      this.balance -= amt;
      target.balance += amt;
    }
  } 
}
</code></pre>
<p>看似正确，但是 this 这把锁可以保护自己的余额 this.balance，却保护不了别人的余额 target.balance。</p>
<h2 id="死锁">死锁</h2>
<p><strong>细粒度锁：用不同的锁对受保护资源进行精细化管理，能够提升性能。</strong><br>
但是使用细粒度锁是有代价的，这个代价就是可能会导致死锁。</p>
<p><strong>死锁：一组互相竞争资源的线程因互相等待，导致“永久”阻塞的现象。</strong><br>
解决死锁最好的办法还是规避死锁。</p>
<p>只有以下四个条件都发生时才会出现死锁：</p>
<ol>
<li>互斥，共享资源 X 和 Y 只能被一个线程占用；</li>
<li>占用且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</li>
<li>不可抢占，其他线程不能强行抢占线程 T1 占用的资源；</li>
<li>循环等待，线程 T1 等待线程 T2 占用的资源，线程 T2 等待线程 T1 占用的资源，就是循环等待。</li>
</ol>
<p><strong>只要破坏其中一个，就可以成功避免死锁的发生。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[可转债]]></title>
        <id>https://Nixuebing.github.io/blog/post/ke-zhuan-zhai</id>
        <link href="https://Nixuebing.github.io/blog/post/ke-zhuan-zhai">
        </link>
        <updated>2019-05-31T01:44:29.000Z</updated>
        <summary type="html"><![CDATA[<p>可转债：是可以转换成公司股票的债券，由上市公司发行。</p>
]]></summary>
        <content type="html"><![CDATA[<p>可转债：是可以转换成公司股票的债券，由上市公司发行。</p>
<!-- more -->
<h2 id="下有保底">下有保底</h2>
<p>当公司股票在任意连续三十个交易日中至少有二十个交易日收盘价低于当期转股价格的80%时开股东大会，商议是否下调转股价。转股价下调，对应的可转债票面价值就会提升。</p>
<p><strong>原来：</strong>
<strong>100元可转债=52.5元的股票价格</strong>
<strong>下调转股价后</strong>
<strong>100元可转债=40元的股票价格</strong></p>
<p>如果公司股票在任何连续三十个交易日的收盘价格低于当期转股价格的70%时，公司以约定的价格回售。</p>
<h2 id="上不封顶">上不封顶</h2>
<p>到130时可以转股</p>
<p><strong>强制赎回</strong>：如果公司A股股票连续三十个交易日中至少有十五个交易日的收盘价格不低于当期转股价格的130%（含130%），这个时候你就要转股了，不转股上市公司要以回售价格（103）收回了。</p>
<h2 id="挑选方法">挑选方法</h2>
<p><a href="https://www.jisilu.cn/data/cbnew/#cb">集思录</a></p>
<p>溢价率&lt;20%<br>
到期收益率&gt;0%<br>
评级是AA级以上（也就是AA,AA+,AAA是符合的）<br>
上市满半年</p>
<h2 id="卖出方法">卖出方法</h2>
<p>当可转债涨到130块以上时，只要从最高点跌去10块钱，就可以卖出。</p>
<table>
<thead>
<tr>
<th>可转债名称</th>
<th>当前价格</th>
<th>溢价率</th>
<th>到期收益率</th>
</tr>
</thead>
<tbody>
<tr>
<td>国贸转债</td>
<td>110.880</td>
<td>13.77%</td>
<td>0.18%</td>
</tr>
<tr>
<td>光大转债</td>
<td>108.050</td>
<td>15.01%</td>
<td>0.31%</td>
</tr>
<tr>
<td>湖广转债</td>
<td>108.610</td>
<td>5.16%</td>
<td>0.91%</td>
</tr>
<tr>
<td>山鹰转债</td>
<td>106.900</td>
<td>5.32%</td>
<td>1.94%</td>
</tr>
<tr>
<td>江银转债</td>
<td>105.189</td>
<td>5.64%</td>
<td>0.90%</td>
</tr>
<tr>
<td>张行转债</td>
<td>102.803</td>
<td>10.07%</td>
<td>2.00%</td>
</tr>
<tr>
<td>苏农转债</td>
<td>105.950</td>
<td>10.66%</td>
<td>1.74%</td>
</tr>
<tr>
<td>无锡转债</td>
<td>101.290</td>
<td>17.93%</td>
<td>1.77%</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[股市入场判断标准]]></title>
        <id>https://Nixuebing.github.io/blog/post/gu-shi-ru-chang-pan-duan-biao-zhun</id>
        <link href="https://Nixuebing.github.io/blog/post/gu-shi-ru-chang-pan-duan-biao-zhun">
        </link>
        <updated>2019-05-28T07:23:57.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>当沪深300的“股息率”，接近甚至大于3年期国债收益率的话，那么股票就具有极高的投资价值。</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>当沪深300的“股息率”，接近甚至大于3年期国债收益率的话，那么股票就具有极高的投资价值。</strong></p>
<!--more-->
<p><code>股票吸引力指数 = 沪深300的股息率 / 3年期国债收益率。</code></p>
<p><strong>“股票吸引力指数”如果接近1，甚至大于1，那就代表股票非常适合投资。</strong></p>
<p>沪深300股息率：<a href="http://www.csindex.com.cn/zh-CN/downloads/index-information">指数估值</a>
3年前国债收益率： <a href="https://cn.investing.com/rates-bonds/china-3-year-bond-yield">英为财情</a></p>
]]></content>
    </entry>
</feed>